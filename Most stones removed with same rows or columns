class Disjoint {
public:
    vector<int> size, parent;

    // Constructor to initialize the Disjoint Set (Union-Find) structure
    Disjoint(int n) {
        size.resize(n + 1, 1);   // Initial size of each component is 1
        parent.resize(n + 1);    // Initialize parent array for each node

        // Each element is its own parent initially (self-loop)
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }
    }

    // Find function with path compression, returns the ultimate parent of a node
    int findpar(int x) {
        if (x == parent[x]) 
            return x;            // If x is its own parent, return x
        // Path compression: make all nodes on the path point directly to the root
        return parent[x] = findpar(parent[x]);
    }

    // Union function to connect two components by size
    void unionBySize(int u, int v) {
        int up = findpar(u);     // Find ultimate parent of u
        int vp = findpar(v);     // Find ultimate parent of v

        if (up == vp) return;    // If already connected, do nothing

        // Union by size: attach smaller tree under the root of the larger tree
        if (size[up] < size[vp]) {
            parent[up] = vp;     // Attach u's tree under v's tree
            size[vp] += size[up]; // Update size of root vp
        } else {
            parent[vp] = up;     // Attach v's tree under u's tree
            size[up] += size[vp]; // Update size of root up
        }
    }
};

class Solution {
public:
    int removeStones(vector<vector<int>>& stones) {
        int n = stones.size();   // Total number of stones

        // Step 1: Find the maximum row and column numbers from stones
        int max_row = 0;
        int max_col = 0;

        // Loop over each stone to determine the maximum row and column values
        for (auto it : stones) {
            max_row = max(max_row, it[0]);  // Update max row value
            max_col = max(max_col, it[1]);  // Update max col value
        }

        // Step 2: Initialize Disjoint Set for each unique row and column
        Disjoint ds(max_row + max_col + 1);

        // Map to track unique rows and columns where stones are located
        unordered_map<int, int> mpp;

        // Step 3: Union each stone's row and column in the Disjoint Set
        for (auto it : stones) {
            int nrow = it[0];             // Row index of the stone
            int ncol = it[1] + max_row + 1; // Offset column index by max_row + 1 to avoid overlap

            ds.unionBySize(nrow, ncol);   // Connect row and column in Disjoint Set

            // Mark the row and column as having a stone
            mpp[nrow] = 1;
            mpp[ncol] = 1;
        }

        int cnt = 0;  // Counter for the number of separate groups

        // Step 4: Count the unique groups by finding root nodes in the Disjoint Set
        for (auto it : mpp) {
            if (ds.findpar(it.first) == it.first) {
                cnt++;  // Increment if the node is its own parent, indicating a unique group
            }
        }

        // Step 5: Calculate the maximum stones that can be removed
        return n - cnt;  // Stones in excess of the number of unique groups can be removed
    }
};
