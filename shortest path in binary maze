class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        //base case if we dont have 0 in 0,0
        if(grid[0][0]==1) return -1;

        int n=grid.size();
        //visited 2D array
        vector<vector<int>> vis(n,vector<int>(n,0));
        //i,j,distance
        queue<pair<pair<int,int>,int>> q;
        //starting coordinate and distance
        q.push({{0,0},1});
        //mark as visited
        vis[0][0]=1;
        //for exploring all 8 directions
        int drow[]={-1,0,+1,0};
        int dcol[]={0,+1,0,-1};
        //BFS traversal
        while(!q.empty()){
            //row,col,distance
            int r=q.front().first.first;
            int c=q.front().first.second;
            int d=q.front().second;
            q.pop();
            //if we reach bottom right cell, return distance
            if(r==n-1 and c==n-1) return d;
            //traversing accross all 8 directions
            for(int i=0;i<4;i++){
                for(int j=0;j<4;j++){
                    //new row and new collumn 
                    int nr=r+drow[i];
                    int nc=c+dcol[j];
                    //checing if in bounds and is 0 and not visited yet
                    if(nr>=0 and nr<n and nc>=0 and nc<n and !vis[nr][nc] and grid[nr][nc]==0){
                        vis[nr][nc]=1;
                        q.push({{nr,nc},d+1});
                    }
                }
            }
        }
        //return -1 if not reached bottom right cell after traversal is complete
        return -1;
    }
};
